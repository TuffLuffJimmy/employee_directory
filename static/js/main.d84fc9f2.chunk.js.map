{"version":3,"sources":["components/Navbar/Navbar.js","components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","dataset","require","DisplayElems","props","console","log","listItems","data","map","each","key","first_name","last_name","department","job_title","buttons","text","Table","useState","filteredData","setFilteredData","button","onClick","prevData","sort","a","b","t","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qNA0BeA,G,MAxBA,WACb,OACE,yBAAKC,UAAU,iDACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,UACA,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBAC1J,0BAAMP,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BQ,GAAG,aAC3C,wBAAIR,UAAU,cACZ,wBAAIA,UAAU,mBACZ,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,QAAsC,0BAAMD,UAAU,WAAhB,eAExC,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,aAEF,wBAAID,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,iB,OChBRQ,EAAUC,EAAQ,GAEhBC,EAAe,SAACC,GAErBC,QAAQC,IAAIF,GACZ,IAAMG,EAAYH,EAAMI,KAAKC,KAAI,SAACC,GAAD,OAChC,wBAAIC,IAAKD,EAAKV,IACb,4BAAKU,EAAKV,IACV,4BAAKU,EAAKE,YACV,4BAAKF,EAAKG,WACV,4BAAKH,EAAKI,YACV,4BAAKJ,EAAKK,eAGZ,OAAO,+BAAQR,IAEVS,EAAU,CACf,CAAEC,KAAM,KAAMN,IAAK,MACnB,CAAEM,KAAM,aAAcN,IAAK,cAC3B,CAAEM,KAAM,UAAWN,IAAK,aACxB,CAAEM,KAAM,aAAcN,IAAK,cAC3B,CAAEM,KAAM,QAASN,IAAK,cAsCRO,EApCD,WAAO,IAAD,EACqBC,mBAASlB,GAD9B,mBACZmB,EADY,KACEC,EADF,KAEnB,OACC,2BAAO7B,UAAU,SAChB,+BACC,4BACEwB,EAAQP,KAAI,SAACa,GAAD,OACZ,wBAAIX,IAAKW,EAAOX,KACf,4BACCnB,UAAU,kBACV+B,QAAS,WACRF,GAAgB,SAACG,GAUhB,OATAA,EAASC,MAAK,SAACC,EAAGC,GACjB,OAAID,EAAEJ,EAAOX,KAAOgB,EAAEL,EAAOX,MACpB,EACEe,EAAEJ,EAAOX,KAAOgB,EAAEL,EAAOX,KAC5B,EAEA,KAGFa,EAASf,KAAI,SAACmB,GAAD,OAAOA,UAI5BN,EAAOL,YAMb,kBAAC,EAAD,CAAcT,KAAMY,MClCRS,GAjBD3B,EAAQ,G,uKAMpB,OACC,6BACC,yBAAKV,UAAU,aACd,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GARasC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,a","file":"static/js/main.d84fc9f2.chunk.js","sourcesContent":["import React from 'react'\n\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#\">Navbar</a>\n      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n        <ul className=\"navbar-nav\">\n          <li className=\"nav-item active\">\n            <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\n          </li>\n          <li className=\"nav-item\">\n            <a className=\"nav-link\" href=\"#\">Features</a>\n          </li>\n          <li className=\"nav-item\">\n            <a className=\"nav-link\" href=\"#\">Pricing</a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  )\n}\n\nexport default Navbar","import React, { useState } from 'react'\n\nlet dataset = require('../../employee_data.json')\n\nconst DisplayElems = (props) => {\n\t// const body = Object.values(props.pass)\n\tconsole.log(props)\n\tconst listItems = props.data.map((each) => (\n\t\t<tr key={each.id}>\n\t\t\t<th>{each.id}</th>\n\t\t\t<th>{each.first_name}</th>\n\t\t\t<th>{each.last_name}</th>\n\t\t\t<th>{each.department}</th>\n\t\t\t<th>{each.job_title}</th>\n\t\t</tr>\n\t))\n\treturn <tbody>{listItems}</tbody>\n}\nconst buttons = [\n\t{ text: 'id', key: 'id' },\n\t{ text: 'first name', key: 'first_name' },\n\t{ text: 'surname', key: 'last_name' },\n\t{ text: 'department', key: 'department' },\n\t{ text: 'title', key: 'job_title' },\n]\nconst Table = () => {\n\tconst [filteredData, setFilteredData] = useState(dataset)\n\treturn (\n\t\t<table className=\"table\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t{buttons.map((button) => (\n\t\t\t\t\t\t<th key={button.key}>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tsetFilteredData((prevData) => {\n\t\t\t\t\t\t\t\t\t\tprevData.sort((a, b) => {\n\t\t\t\t\t\t\t\t\t\t\tif (a[button.key] < b[button.key]) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn -1\n\t\t\t\t\t\t\t\t\t\t\t} else if (a[button.key] > b[button.key]) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn 1\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\treturn 0\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\treturn prevData.map((t) => t)\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{button.text}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</th>\n\t\t\t\t\t))}\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<DisplayElems data={filteredData} />\n\t\t</table>\n\t)\n}\n\nexport default Table\n","import React, { Component } from 'react'\nimport './App.css'\nimport Navbar from './components/Navbar'\nimport Table from './components/Table'\n\nlet dataset = require('./employee_data.json')\n\nclass App extends Component {\n\n\trender() {\n    // console.log(dataset)\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<Navbar />\n\t\t\t\t\t<Table />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}